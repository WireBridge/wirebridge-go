// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VPNServiceClient is the client API for VPNService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VPNServiceClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (VPNService_ConnectClient, error)
}

type vPNServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVPNServiceClient(cc grpc.ClientConnInterface) VPNServiceClient {
	return &vPNServiceClient{cc}
}

func (c *vPNServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (VPNService_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &VPNService_ServiceDesc.Streams[0], "/proto.VPNService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &vPNServiceConnectClient{stream}
	return x, nil
}

type VPNService_ConnectClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type vPNServiceConnectClient struct {
	grpc.ClientStream
}

func (x *vPNServiceConnectClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vPNServiceConnectClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VPNServiceServer is the server API for VPNService service.
// All implementations must embed UnimplementedVPNServiceServer
// for forward compatibility
type VPNServiceServer interface {
	Connect(VPNService_ConnectServer) error
	mustEmbedUnimplementedVPNServiceServer()
}

// UnimplementedVPNServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVPNServiceServer struct {
}

func (UnimplementedVPNServiceServer) Connect(VPNService_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedVPNServiceServer) mustEmbedUnimplementedVPNServiceServer() {}

// UnsafeVPNServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VPNServiceServer will
// result in compilation errors.
type UnsafeVPNServiceServer interface {
	mustEmbedUnimplementedVPNServiceServer()
}

func RegisterVPNServiceServer(s grpc.ServiceRegistrar, srv VPNServiceServer) {
	s.RegisterService(&VPNService_ServiceDesc, srv)
}

func _VPNService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VPNServiceServer).Connect(&vPNServiceConnectServer{stream})
}

type VPNService_ConnectServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type vPNServiceConnectServer struct {
	grpc.ServerStream
}

func (x *vPNServiceConnectServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vPNServiceConnectServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VPNService_ServiceDesc is the grpc.ServiceDesc for VPNService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VPNService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.VPNService",
	HandlerType: (*VPNServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _VPNService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "conn.proto",
}
